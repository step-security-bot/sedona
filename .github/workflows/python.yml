name: Python build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

env:
  MAVEN_OPTS: -Dmaven.wagon.httpconnectionManager.ttlSeconds=60
      
permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - spark: '3.4.0'
            scala: '2.12.8'
            python: '3.10'
            hadoop: '3'
          - spark: '3.4.0'
            scala: '2.12.8'
            python: '3.9'
            hadoop: '3'
          - spark: '3.4.0'
            scala: '2.12.8'
            python: '3.8'
            hadoop: '3'
          - spark: '3.4.0'
            scala: '2.12.8'
            python: '3.7'
            hadoop: '3'
          - spark: '3.3.0'
            scala: '2.12.8'
            python: '3.8'
            hadoop: '3'
          - spark: '3.2.0'
            scala: '2.12.8'
            python: '3.7'
            hadoop: '2.7'
          - spark: '3.1.2'
            scala: '2.12.8'
            python: '3.7'
            hadoop: '2.7'
          - spark: '3.0.3'
            scala: '2.12.8'
            python: '3.7'
            hadoop: '2.7'

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '8'
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - env:
        SPARK_VERSION: ${{ matrix.spark }}
        SCALA_VERSION: ${{ matrix.scala }}
      run: |
          SPARK_COMPAT_VERSION="3.0"
          if [ ${SPARK_VERSION:2:1} -gt "3" ]; then
            SPARK_COMPAT_VERSION=${SPARK_VERSION:0:3}
          fi
          mvn -q clean install -DskipTests -Dspark=${SPARK_COMPAT_VERSION} -Dscala=${SCALA_VERSION:0:4} -Dgeotools
    - env:
        SPARK_VERSION: ${{ matrix.spark }}
        HADOOP_VERSION: ${{ matrix.hadoop }}
      run: wget https://archive.apache.org/dist/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz
    - env:
        SPARK_VERSION: ${{ matrix.spark }}
        HADOOP_VERSION: ${{ matrix.hadoop }}
      run: tar -xzf spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz
    - run: sudo apt-get -y install python3-pip python-dev-is-python3
    - run: sudo pip3 install -U setuptools
    - run: sudo pip3 install -U wheel
    - run: sudo pip3 install -U virtualenvwrapper
    - run: python3 -m pip install pipenv
    - run: cd python; python3 setup.py build_ext --inplace
    - env:
        SPARK_VERSION: ${{ matrix.spark }}
        PYTHON_VERSION: ${{ matrix.python }}
      run: (cd python;pipenv --python ${PYTHON_VERSION};pipenv install pyspark==${SPARK_VERSION};pipenv install --dev;pipenv graph)
    - env:
        SPARK_VERSION: ${{ matrix.spark }}
        HADOOP_VERSION: ${{ matrix.hadoop }}
      run: find spark-shaded/target -name sedona-*.jar -exec cp {} spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}/jars/ \;
    - env:
        SPARK_VERSION: ${{ matrix.spark }}
        HADOOP_VERSION: ${{ matrix.hadoop }}
      run: (export SPARK_HOME=$PWD/spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION};export PYTHONPATH=$SPARK_HOME/python;cd python;pipenv run pytest tests)
